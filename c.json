/* Basic configurations for debugging with Vimspector
  
   Note: C/C++ style comments are allowed here since Vimspector
         will remove them before parsing the json file

   Next, you can find basic configurations for debugging local/remote
   python/C programs.

   1. Python       : debug local python code
   2. Python Remote: debug remote python code
   3. C            : debug local C code
   4. C Remote     : debug remote C code

   Debugging chain:
   Vim -> Vimspector plugin -> specific-language adapter -> specific-language debugger -> binary (or attach to remote server)
          |                    |                            |                             |
          |                    |                            |                             \_ File to debug
          |                    |                            \_ native debugger (ie: gdb)
          |                    \_ DAP to native-language debugger (ie: vscode-cpptools)
          |                       Yes.. Vimspector takes advantage of the Vscode adapters.
          |                       
          \_ Visual debugging support (windows for code/variables/..) and DAP (Debug Adapter Protocol from Microsoft) support

   DAP is a language-agnostic debug protocol, which of course, is not supported by any debugger :), so DAP-debugger adapters are
   needed in order to complete the chain. In the end, you'll be using the usual debugger under the hood. You can even execute regular
   native commands if you need to (ie: (for gdb) -exec p i)

   For remote debugging, you need, of course, to launch the debugger server (ie: gdbserver, debugpy, ...). You can automate this process
   inside the adapter configuration (by connecting using PASSWORDLESS ssh and running the server in the remote machine). 
   In the next configurations, it is assumed that you manually enter the remote machine and launch the debugger server. I don't quite
   like to be Forced to use passwordless ssh to automate this task (anyway configure it is very easy).

   Curious notes:
   - Python config uses 'stopOnEntry' and C config uses 'stopAtEntry'. 'stopOnEntry' does not work (for me) in remote python debugging
   - Python remote config uses 'attach' and C remote config uses 'launch'

   Future work:
   - Add configuration example for cross-compiled code and using OCD 
*/

{
  "configurations": {
    "C": {
      // Local C debugging
      "adapter": "vscode-cpptools",
      "configuration": {
        "request": "launch",
        "program": "${workspaceRoot}/${fileBasenameNoExtension}",
        "StopAtEntry": true,
        "MIMode": "gdb",
        "setupCommands": [
          {
            "description": "Enable pretty-printing for gdb",
            "text": "-enable-pretty-printing",
            "ignoreFailures": true
          }
        ]
      }
    },

    "C Remote": {
      /* Remote C debugging
         This configuration it is assuming that you enter the remote machine and manually launch the debugger server:
         >> gdbserver --once --no-startup-with-shell  localhost:1679 ${BIN}
         Then start debugging from Vim

         Note:
         - 'miDebuggerServerAddress' makes the difference (configured -> connects to remote gdbserver, not-configured -> debugs local binary)
         - 'variables' section is explitly configured to prevent Vimspector to ask the user for them (feel free to 
           uncomment those lines
      */
      "variables": {
        "host": "localhost",
        "port": 1679
      },
      "adapter": "cpptools-remote",
      "configuration": {
        "request": "launch",
        "cwd": "${workspaceFolder}",
        "program": "${workspaceRoot}/${fileBasenameNoExtension}",
        "StopAtEntry": true,
        "MIMode": "gdb",
        "miDebuggerServerAddress": "${host}:${port}",
        // Don't know about this..it is just configured everywhere
        "setupCommands": [
          {
            "description": "Enable pretty-printing for gdb",
            "text": "-enable-pretty-printing",
            "ignoreFailures": true
          }
        ]
      }
    }
  }
}
